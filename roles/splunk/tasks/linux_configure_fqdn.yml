
# Gather Facts: Retrieves the hostname and default IP address of the machine.

# Construct the FQDN: Prepares the full domain name by appending the specified domain to the current hostname.

# Pre-check DNS Resolution: Uses the getent hosts command to see if the FQDN resolves to any IP address. The ignore_errors: yes allows the playbook to continue even if the command fails (i.e., the FQDN does not resolve).

# Conditional Failure: If the FQDN resolves to an IP address different from the server’s current IP, the playbook will fail to prevent potential conflicts.

# Configuration Block: If the FQDN does not resolve or resolves correctly (to the server’s IP), the playbook continues with changing the hostname settings and ensures these changes are applied across system services by rebooting.
---

- name: Gather facts about the current hostname and default IP
  setup:
    filter: "ansible_hostname,ansible_default_ipv4"

- name: Construct the FQDN
  set_fact:
    fqdn: "{{ ansible_hostname }}.{{ domain }}"

- name: Check if FQDN resolves in DNS before making changes
  command: getent hosts {{ fqdn }}
  register: pre_dns_check
  ignore_errors: true

- name: Fail if FQDN already resolves to a different IP
  fail:
    msg: "The FQDN {{ fqdn }} resolves to an IP address that is not the server's IP ({{ ansible_default_ipv4.address }}), aborting to prevent conflicts."
  when: pre_dns_check.rc == 0 and ansible_default_ipv4.address not in pre_dns_check.stdout

- name: Continue with configuration as FQDN resolves correctly
  become: true
  block:
    - name: Add an entry to /etc/hosts
      lineinfile:
        path: /etc/hosts
        regexp: '.*{{ ansible_hostname }}$'
        line: "{{ ansible_default_ipv4.address }} {{ fqdn }} {{ ansible_hostname }}"
        state: present

    - name: Set the hostname with hostnamectl to the new FQDN
      command: hostnamectl set-hostname {{ fqdn }}

    - name: Verify post-change DNS resolution
      command: getent hosts {{ fqdn }}
      register: post_dns_check
      failed_when: "post_dns_check.stdout == '' or ansible_default_ipv4.address not in post_dns_check.stdout"

    - name: Reboot the machine
      reboot:
        msg: "Rebooting to apply hostname changes"
        connect_timeout: 5
        reboot_timeout: 300
        pre_reboot_delay: 0
        post_reboot_delay: 60
        test_command: uptime

  when: pre_dns_check.rc != 0 or ansible_default_ipv4.address in pre_dns_check.stdout
